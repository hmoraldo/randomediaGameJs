/*

Copyright (c) 2003 - 2014 Horacio Hernan Moraldo

This software is provided 'as-is', without any express or
implied warranty. In no event will the authors be held liable
for any damages arising from the use of this software.

Permission is granted to anyone to use this software for any
purpose, including commercial applications, and to alter it and
redistribute it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you
must not claim that you wrote the original software. If you use
this software in a product, an acknowledgment in the product
documentation would be appreciated but is not required.

2. Altered source versions must be plainly marked as such, and
must not be misrepresented as being the original software.

3. This notice may not be removed or altered from any source
distribution.
*/

#include "gamesound.h"// for accessing the functions that convert game events to sound executions
#include "soundman.h"// for using the functions related to sound management
#include "gameglobals.h"// for using the game objects
#include "globals.h"// for using the program objects
#include <stdlib.h>

// This function executes the sound corresponding to the event of
// having an enemy been hit by a flame bullet.
bool makeSoundFlameBulletHitEnemy()
{
	bool errCode;

	switch (rand()%4) {
	case 0:
		errCode=stopAndPlaySoundResource("sndIngameDog8");
		break;
	case 1:
		errCode=stopAndPlaySoundResource("sndIngameDog9");
		break;
	case 2:
		errCode=stopAndPlaySoundResource("sndIngameDog10");
		break;
	case 3:
		errCode=stopAndPlaySoundResource("sndIngameDog11");
		break;
	}

	return errCode;
}// makeSoundFlameBulletHitEnemy

// This function executes the sound corresponding to the event of
// having a wall been hit by a flame bullet.
bool makeSoundFlameBulletHitWall()
{
	return makeSoundFlameBulletHitEnemy();
}// makeSoundFlameBulletHitWall

// This function executes the sound corresponding to the event of
// having a player dropping a flame bullet.
bool makeSoundPlayerDropBullet()
{
	bool errCode;

	switch (rand()%5) {
	case 0:
		errCode=stopAndPlaySoundResource("sndIngameDog1");
		break;
	case 1:
		errCode=stopAndPlaySoundResource("sndIngameDog2");
		break;
	case 2:
		errCode=stopAndPlaySoundResource("sndIngameDog3");
		break;
	case 3:
		errCode=stopAndPlaySoundResource("sndIngameDog4");
		break;
	case 4:
		errCode=stopAndPlaySoundResource("sndIngameDog7");
		break;
	}

	return errCode;
}// makeSoundPlayerDropBullet

// This function executes the sound corresponding to the event of
// having a very happy sheep (they are always that happy)
bool makeSoundHappySheep()
{
	bool errCode;

	switch (rand()%7) {
	case 0:
		errCode=playSoundResource("sndIngameSheep1");
		break;
	case 1:
		errCode=playSoundResource("sndIngameSheep2");
		break;
	case 2:
		errCode=playSoundResource("sndIngameSheep3");
		break;
	case 3:
		errCode=playSoundResource("sndIngameSheep4");
		break;
	case 4:
		errCode=playSoundResource("sndIngameSheep5");
		break;
	case 5:
		errCode=playSoundResource("sndIngameSheep6");
		break;
	case 6:
		errCode=playSoundResource("sndIngameSheep7");
		break;
	}

	return errCode;
}// makeSoundHappySheep

// This function executes the sound corresponding to the event of
// reaching the game over.
bool makeSoundGameOver()
{
	return stopAndPlaySoundResource("fxwavGameOver");
}// makeSoundGameOver

// This function executes the sound corresponding to the event of
// the player being hit by some enemy.
bool makeSoundProtagTouched()
{
	bool errCode;

	switch (rand()%2) {
	case 0:
		errCode=stopAndPlaySoundResource("sndIngameUy1");
		break;
	case 1:
		errCode=stopAndPlaySoundResource("sndIngameUy2");
		break;
	}

	return errCode;
}// makeSoundProtagTouched

// This function executes the sound corresponding to the event of
// the player being killed by some enemy.
bool makeSoundProtagKilled()
{
	bool errCode;

	switch (rand()%3) {
	case 0:
		errCode=stopAndPlaySoundResource("sndIngameLaughing1");
		break;
	case 1:
		errCode=stopAndPlaySoundResource("sndIngameLaughing2");
		break;
	case 2:
		errCode=stopAndPlaySoundResource("sndIngameLaughing3");
		break;
	}

	return errCode;
}// makeSoundProtagKilled

// This function executes the sound corresponding to the event of
// the user having advanced to a new stage.
bool makeSoundAdvanceStage()
{
	bool errCode;

	switch (rand()%2) {
	case 0:
		errCode=stopAndPlaySoundResource("sndIngameMonster1");
		break;
	case 1:
		errCode=stopAndPlaySoundResource("sndIngameMonster2");
		break;
	}

	return errCode;
}// makeSoundAdvanceStage

// This function executes the sound corresponding to the event of
// having a new unit being generated by a wave gen.
bool makeSoundGeneratedUnit()
{
	// actually, we don't want it to be that disturbing, let's keep
	// it quiet
	return true;
}// makeSoundGeneratedUnit

// This function executes the sound corresponding to the event of
// having a friendly unit (sheep or cow) achieving its escape.
bool makeSoundFriendlyUnitEscaped()
{
	// actually, we don't want it to be that disturbing, let's keep
	// it quiet
	return true;
}// makeSoundFriendlyUnitEscaped




// This function executes one of the many ingame musics, according to
// the music order number obtained through the parameter
bool executeIngameMusic(int ordMusic) {
	bool errCode;

	// stop or start music four
	if (ordMusic!=0 && ordMusic!=1 && ordMusic!=2) {
		errCode=playSoundResource("musWavIngameFull", true);
	}else{
		errCode=stopSoundResource("musWavIngameFull");
	}

	// stop or start music three
	if (ordMusic==2) {
		errCode=playSoundResource("musWavIngame150", true);
	}else{
		errCode=stopSoundResource("musWavIngame150");
	}

	// stop or start music two
	if (ordMusic==1) {
		errCode=playSoundResource("musWavIngame140", true);
	}else{
		errCode=stopSoundResource("musWavIngame140");
	}

	// also executing the one means executing the intro sound
	if (ordMusic==0) {
		errCode=playSoundResource("musWavIngameIntro", false);
	}

	return errCode;
}// executeIngameMusic
